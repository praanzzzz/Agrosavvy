# Generated by Django 5.0.6 on 2024-09-19 10:33

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Barangay',
            fields=[
                ('brgy_id', models.AutoField(primary_key=True, serialize=False)),
                ('brgy_name', models.CharField(choices=[('Adlaon', 'Adlaon'), ('Agsungot', 'Agsungot'), ('Apas', 'Apas'), ('Babag', 'Babag'), ('Bacayan', 'Bacayan'), ('Banilad', 'Banilad'), ('Basak Pardo', 'Basak Pardo'), ('Busay', 'Busay'), ('Calamba', 'Calamba'), ('Cambinocot', 'Cambinocot'), ('Camputhaw', 'Camputhaw'), ('Capitol Site', 'Capitol Site'), ('Carreta', 'Carreta'), ('Central', 'Central'), ('Cogon Pardo', 'Cogon Pardo'), ('Cogon Ramos', 'Cogon Ramos'), ('Day-as', 'Day-as'), ('Duljo', 'Duljo'), ('Ermita', 'Ermita'), ('Guadalupe', 'Guadalupe'), ('Guba', 'Guba'), ('Hippodromo', 'Hippodromo'), ('Inayawan', 'Inayawan'), ('Kalubihan', 'Kalubihan'), ('Kalunasan', 'Kalunasan'), ('Kamagayan', 'Kamagayan'), ('Kasambagan', 'Kasambagan'), ('Kinasang-an Pardo', 'Kinasang-an Pardo'), ('Labangon', 'Labangon'), ('Lahug', 'Lahug'), ('Lorega (Lorega San Miguel)', 'Lorega (Lorega San Miguel)'), ('Lusaran', 'Lusaran'), ('Luz', 'Luz'), ('Mabini', 'Mabini'), ('Mabolo', 'Mabolo'), ('Malubog', 'Malubog'), ('Mambaling', 'Mambaling'), ('Pahina Central', 'Pahina Central'), ('Pahina San Nicolas', 'Pahina San Nicolas'), ('Pamutan', 'Pamutan'), ('Pardo', 'Pardo'), ('Pari-an', 'Pari-an'), ('Paril', 'Paril'), ('Pasil', 'Pasil'), ('Pit-os', 'Pit-os'), ('Pulangbato', 'Pulangbato'), ('Pung-ol-Sibugay', 'Pung-ol-Sibugay'), ('Punta Princesa', 'Punta Princesa'), ('Quiot Pardo', 'Quiot Pardo'), ('Sambag I', 'Sambag I'), ('Sambag II', 'Sambag II'), ('San Antonio', 'San Antonio'), ('San Jose', 'San Jose'), ('San Nicolas Central', 'San Nicolas Central'), ('San Roque (Ciudad)', 'San Roque (Ciudad)'), ('Santa Cruz', 'Santa Cruz'), ('Sapangdaku', 'Sapangdaku'), ('Sawang Calero', 'Sawang Calero'), ('Sinsin', 'Sinsin'), ('Sirao', 'Sirao'), ('Suba Poblacion (Suba San Nicolas)', 'Suba Poblacion (Suba San Nicolas)'), ('Sudlon I', 'Sudlon I'), ('Sudlon II', 'Sudlon II'), ('Tabunan', 'Tabunan'), ('Tagbao', 'Tagbao'), ('Talamban', 'Talamban'), ('Taptap', 'Taptap'), ('Tejero (Villa Gonzalo)', 'Tejero (Villa Gonzalo)'), ('Tinago', 'Tinago'), ('Tisa', 'Tisa'), ('To-ong Pardo', 'To-ong Pardo'), ('T. Padilla', 'T. Padilla'), ('Zapatera', 'Zapatera')], max_length=50)),
            ],
            options={
                'ordering': ['brgy_name'],
            },
        ),
        migrations.CreateModel(
            name='Crop',
            fields=[
                ('crop_id', models.AutoField(primary_key=True, serialize=False)),
                ('crop_type', models.CharField(choices=[('Carrots', 'Carrots'), ('Potato', 'Potato'), ('Garlic', 'Garlic'), ('Eggplant', 'Eggplant'), ('Tomato', 'Tomato'), ('Squash', 'Squash'), ('Bitter Gourd', 'Bitter Gourd'), ('Cabbage', 'Cabbage'), ('Onion', 'Onion')], max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Gender',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], max_length=7)),
            ],
        ),
        migrations.CreateModel(
            name='RoleUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('roleuser', models.CharField(choices=[('da_admin', 'da_admin'), ('brgy_officer', 'brgy_officer'), ('farmer', 'farmer')], max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='UserAddress',
            fields=[
                ('useraddress_id', models.AutoField(primary_key=True, serialize=False)),
                ('useraddress', models.CharField(choices=[('Adlaon, Cebu City', 'Adlaon, Cebu City'), ('Agsungot, Cebu City', 'Agsungot, Cebu City'), ('Apas, Cebu City', 'Apas, Cebu City'), ('Babag, Cebu City', 'Babag, Cebu City'), ('Bacayan, Cebu City', 'Bacayan, Cebu City'), ('Banilad, Cebu City', 'Banilad, Cebu City'), ('Basak Pardo, Cebu City', 'Basak Pardo, Cebu City'), ('Busay, Cebu City', 'Busay, Cebu City'), ('Calamba, Cebu City', 'Calamba, Cebu City'), ('Cambinocot, Cebu City', 'Cambinocot, Cebu City'), ('Camputhaw, Cebu City', 'Camputhaw, Cebu City'), ('Capitol Site, Cebu City', 'Capitol Site, Cebu City'), ('Carreta, Cebu City', 'Carreta, Cebu City'), ('Central, Cebu City', 'Central, Cebu City'), ('Cogon Pardo, Cebu City', 'Cogon Pardo, Cebu City'), ('Cogon Ramos, Cebu City', 'Cogon Ramos, Cebu City'), ('Day-as, Cebu City', 'Day-as, Cebu City'), ('Duljo, Cebu City', 'Duljo, Cebu City'), ('Ermita, Cebu City', 'Ermita, Cebu City'), ('Guadalupe, Cebu City', 'Guadalupe, Cebu City'), ('Guba, Cebu City', 'Guba, Cebu City'), ('Hippodromo, Cebu City', 'Hippodromo, Cebu City'), ('Inayawan, Cebu City', 'Inayawan, Cebu City'), ('Kalubihan, Cebu City', 'Kalubihan, Cebu City'), ('Kalunasan, Cebu City', 'Kalunasan, Cebu City'), ('Kamagayan, Cebu City', 'Kamagayan, Cebu City'), ('Kasambagan, Cebu City', 'Kasambagan, Cebu City'), ('Kinasang-an Pardo, Cebu City', 'Kinasang-an Pardo, Cebu City'), ('Labangon, Cebu City', 'Labangon, Cebu City'), ('Lahug, Cebu City', 'Lahug, Cebu City'), ('Lorega (Lorega San Miguel), Cebu City', 'Lorega (Lorega San Miguel), Cebu City'), ('Lusaran, Cebu City', 'Lusaran, Cebu City'), ('Luz, Cebu City', 'Luz, Cebu City'), ('Mabini, Cebu City', 'Mabini, Cebu City'), ('Mabolo, Cebu City', 'Mabolo, Cebu City'), ('Malubog, Cebu City', 'Malubog, Cebu City'), ('Mambaling, Cebu City', 'Mambaling, Cebu City'), ('Pahina Central, Cebu City', 'Pahina Central, Cebu City'), ('Pahina San Nicolas, Cebu City', 'Pahina San Nicolas, Cebu City'), ('Pamutan, Cebu City', 'Pamutan, Cebu City'), ('Pardo, Cebu City', 'Pardo, Cebu City'), ('Pari-an, Cebu City', 'Pari-an, Cebu City'), ('Paril, Cebu City', 'Paril, Cebu City'), ('Pasil, Cebu City', 'Pasil, Cebu City'), ('Pit-os, Cebu City', 'Pit-os, Cebu City'), ('Pulangbato, Cebu City', 'Pulangbato, Cebu City'), ('Pung-ol-Sibugay, Cebu City', 'Pung-ol-Sibugay, Cebu City'), ('Punta Princesa, Cebu City', 'Punta Princesa, Cebu City'), ('Quiot Pardo, Cebu City', 'Quiot Pardo, Cebu City'), ('Sambag I, Cebu City', 'Sambag I, Cebu City'), ('Sambag II, Cebu City', 'Sambag II, Cebu City'), ('San Antonio, Cebu City', 'San Antonio, Cebu City'), ('San Jose, Cebu City', 'San Jose, Cebu City'), ('San Nicolas Central, Cebu City', 'San Nicolas Central, Cebu City'), ('San Roque (Ciudad), Cebu City', 'San Roque (Ciudad), Cebu City'), ('Santa Cruz, Cebu City', 'Santa Cruz, Cebu City'), ('Sapangdaku, Cebu City', 'Sapangdaku, Cebu City'), ('Sawang Calero, Cebu City', 'Sawang Calero, Cebu City'), ('Sinsin, Cebu City', 'Sinsin, Cebu City'), ('Sirao, Cebu City', 'Sirao, Cebu City'), ('Suba Poblacion (Suba San Nicolas), Cebu City', 'Suba Poblacion (Suba San Nicolas), Cebu City'), ('Sudlon I, Cebu City', 'Sudlon I, Cebu City'), ('Sudlon II, Cebu City', 'Sudlon II, Cebu City'), ('Tabunan, Cebu City', 'Tabunan, Cebu City'), ('Tagbao, Cebu City', 'Tagbao, Cebu City'), ('Talamban, Cebu City', 'Talamban, Cebu City'), ('Taptap, Cebu City', 'Taptap, Cebu City'), ('Tejero (Villa Gonzalo), Cebu City', 'Tejero (Villa Gonzalo), Cebu City'), ('Tinago, Cebu City', 'Tinago, Cebu City'), ('Tisa, Cebu City', 'Tisa, Cebu City'), ('To-ong Pardo, Cebu City', 'To-ong Pardo, Cebu City'), ('T. Padilla, Cebu City', 'T. Padilla, Cebu City'), ('Zapatera, Cebu City', 'Zapatera, Cebu City')], max_length=100)),
            ],
            options={
                'ordering': ['useraddress'],
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('firstname', models.CharField(blank=True, max_length=30)),
                ('lastname', models.CharField(blank=True, max_length=30)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('active_status', models.BooleanField(default=True)),
                ('is_approved', models.BooleanField(default=False)),
                ('request_date', models.DateTimeField(auto_now_add=True)),
                ('approved_date', models.DateTimeField(blank=True, null=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_users', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('gender', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app_agrosavvy.gender')),
                ('roleuser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app_agrosavvy.roleuser')),
                ('useraddress', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app_agrosavvy.useraddress')),
            ],
            options={
                'ordering': ['-approved_date'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('address_id', models.AutoField(primary_key=True, serialize=False)),
                ('city_municipality', models.CharField(max_length=100)),
                ('country', models.CharField(max_length=100)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('barangay', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app_agrosavvy.barangay')),
            ],
        ),
        migrations.CreateModel(
            name='Field',
            fields=[
                ('field_id', models.AutoField(primary_key=True, serialize=False)),
                ('field_name', models.CharField(max_length=100)),
                ('field_acres', models.FloatField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_deleted', models.BooleanField(default=False)),
                ('address', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fields', to='app_agrosavvy.address')),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fields', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FieldCropData',
            fields=[
                ('fieldcrop_id', models.AutoField(primary_key=True, serialize=False)),
                ('planting_date', models.DateField()),
                ('harvest_date', models.DateField()),
                ('is_deleted', models.BooleanField(default=False)),
                ('crop_planted', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_agrosavvy.crop')),
                ('field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_agrosavvy.field')),
            ],
            options={
                'ordering': ['-planting_date'],
            },
        ),
        migrations.CreateModel(
            name='FieldSoilData',
            fields=[
                ('soil_id', models.AutoField(primary_key=True, serialize=False)),
                ('nitrogen', models.FloatField(blank=True, null=True)),
                ('phosphorous', models.FloatField(blank=True, null=True)),
                ('potassium', models.FloatField(blank=True, null=True)),
                ('ph', models.FloatField(blank=True, null=True)),
                ('record_date', models.DateField()),
                ('is_deleted', models.BooleanField(default=False)),
                ('field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_agrosavvy.field')),
            ],
            options={
                'ordering': ['-record_date'],
            },
        ),
        migrations.CreateModel(
            name='AI_Recommendations',
            fields=[
                ('reco_id', models.AutoField(primary_key=True, serialize=False)),
                ('recommendations', models.TextField(blank=True, null=True)),
                ('field', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app_agrosavvy.field')),
                ('fieldsoildata', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app_agrosavvy.fieldsoildata')),
            ],
            options={
                'ordering': ['-reco_id'],
            },
        ),
        migrations.CreateModel(
            name='ReviewRating',
            fields=[
                ('reviewrating_id', models.AutoField(primary_key=True, serialize=False)),
                ('rating', models.CharField(choices=[('1', 'Excellent'), ('2', 'Good'), ('3', 'Average'), ('4', 'Bad'), ('5', 'Worse')], max_length=1)),
                ('review_header', models.CharField(blank=True, max_length=30, null=True)),
                ('review_body', models.CharField(blank=True, max_length=200, null=True)),
                ('rate_date', models.DateTimeField(auto_now_add=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('reviewer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PendingUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=150)),
                ('password', models.CharField(max_length=128)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('firstname', models.CharField(blank=True, max_length=30)),
                ('lastname', models.CharField(blank=True, max_length=30)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('request_date', models.DateTimeField(auto_now_add=True)),
                ('gender', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app_agrosavvy.gender')),
                ('roleuser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app_agrosavvy.roleuser')),
                ('useraddress', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app_agrosavvy.useraddress')),
            ],
        ),
    ]
